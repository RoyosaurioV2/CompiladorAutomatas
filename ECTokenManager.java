/* Generated By:JavaCC: Do not edit this line. ECTokenManager.java */
import java.io.*;
import java.util.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.*;
import java.lang.reflect.*;

/** Token Manager. */
public class ECTokenManager implements ECConstants
{
    EC compilador;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x300400000000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 61;
         }
         if ((active0 & 0x88a820000000034L) != 0L)
         {
            jjmatchedKind = 61;
            return 17;
         }
         if ((active0 & 0x420000000006000L) != 0L)
         {
            jjmatchedKind = 61;
            return 4;
         }
         if ((active0 & 0x1055340000001042L) != 0L)
         {
            jjmatchedKind = 61;
            return 86;
         }
         return -1;
      case 1:
         if ((active0 & 0x50000000000000L) != 0L)
            return 86;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return 60;
         }
         if ((active0 & 0x198ff60000007076L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return 86;
         }
         if ((active0 & 0x420000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return 3;
         }
         return -1;
      case 2:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return 2;
         }
         if ((active0 & 0x88a800000000024L) != 0L)
            return 86;
         if ((active0 & 0x1345760000007052L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return 86;
         }
         return -1;
      case 3:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x240100000000000L) != 0L)
            return 86;
         if ((active0 & 0x19afa60000007072L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 86;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1080020000000000L) != 0L)
            return 86;
         if ((active0 & 0x92fa40000007072L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 86;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
            return 86;
         if ((active0 & 0x92f840000007070L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 86;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4800000000010L) != 0L)
            return 86;
         if ((active0 & 0x92b040000007060L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 86;
         }
         return -1;
      case 7:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x121000000002040L) != 0L)
            return 86;
         if ((active0 & 0x80a040000005020L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
            return 86;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 86;
         if ((active0 & 0x802000000005020L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
            return 86;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4020L) != 0L)
            return 86;
         if ((active0 & 0x802000000001000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
            return 86;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x802000000001000L) != 0L)
            return 86;
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 33:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 20);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 42:
         return jjStopAtPos(0, 18);
      case 43:
         return jjStopAtPos(0, 16);
      case 44:
         return jjStopAtPos(0, 3);
      case 45:
         return jjStopAtPos(0, 17);
      case 47:
         return jjStopAtPos(0, 19);
      case 58:
         return jjStopAtPos(0, 30);
      case 59:
         return jjStopAtPos(0, 43);
      case 60:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 62:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x300400000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x420000000006000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x88a820000000034L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x1000200000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1002L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x4000000000040L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x50000000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 33);
      case 93:
         return jjStopAtPos(0, 34);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 38:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200320000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040000000040L, active1, 0L);
      case 105:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8cb800000000024L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000001002L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100400000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0L);
      case 124:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000002000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9cac00000000030L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000005040L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 97:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000004000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x12L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000001000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 111:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 86);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x420000000000040L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa40000000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 105:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000002012L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x900000000000000L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x405000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800400000000060L);
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x501800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000040L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000020L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x20040000004000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 86);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 86);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 86);
         return jjMoveStringLiteralDfa8_0(active0, 0x440000000000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 86);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 86);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000004000L);
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 86);
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x802000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x402000000001000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x800400000000000L);
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 5, 86);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 59, 86);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 86);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 49, 86);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      case 111:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(11, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L);
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(13, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(14, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x2000000020000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddStates(3, 8);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 44:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 35)
                     jjCheckNAddStates(9, 11);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 51:
                  if (curChar == 10)
                     kind = 66;
                  break;
               case 52:
                  if (curChar != 13)
                     break;
                  kind = 66;
                  jjCheckNAdd(51);
                  break;
               case 53:
                  if (curChar != 46)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 2);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 2);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddStates(3, 8);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(81);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 46)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 99)
                     jjAddStates(15, 16);
                  else if (curChar == 67)
                     jjAddStates(17, 18);
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 0:
                  if (curChar == 111 && kind > 7)
                     kind = 7;
                  break;
               case 1:
               case 6:
                  if (curChar == 114)
                     jjCheckNAdd(0);
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 12:
               case 19:
                  if (curChar == 116)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 111 && kind > 11)
                     kind = 11;
                  break;
               case 27:
               case 34:
                  if (curChar == 110)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(48);
                  break;
               case 50:
                  jjAddStates(9, 11);
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(53, 55);
                  break;
               case 56:
                  if (curChar == 67)
                     jjAddStates(17, 18);
                  break;
               case 57:
                  if (curChar == 97 && kind > 9)
                     kind = 9;
                  break;
               case 58:
               case 70:
                  if (curChar == 110)
                     jjCheckNAdd(57);
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if (curChar == 114 && kind > 10)
                     kind = 10;
                  break;
               case 63:
               case 74:
                  if (curChar == 101)
                     jjCheckNAdd(62);
                  break;
               case 64:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 99)
                     jjAddStates(15, 16);
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 86:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 2:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 17:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 61:
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(48);
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(53, 55);
                  }
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(48);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 54:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(53, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   53, 54, 55, 81, 82, 83, 85, 53, 55, 50, 51, 52, 85, 53, 55, 73, 
   79, 61, 68, 42, 43, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\111\156\151\143\151\157", "\106\151\156", "\54", 
"\106\165\156\143\151\157\156", "\106\151\156\106\165\156\143\151\157\156", 
"\122\145\164\157\162\156\141\162", null, null, null, null, null, "\111\156\164\145\162\160\162\145\164\141\162", 
"\105\163\143\162\151\142\151\162", "\105\163\164\141\142\154\145\143\145\162", "\75", "\53", "\55", "\52", "\57", 
"\45", "\46\46", "\174\174", "\41", "\75\75", "\41\75", "\76", "\74", "\76\75", 
"\74\75", "\72", "\50", "\51", "\133", "\135", null, null, null, null, null, null, 
"\106\141\154\163\157", "\126\145\162\144\141\144\145\162\157", "\73", "\120\141\162\141", 
"\110\141\163\164\141\40\161\165\145", "\103\157\156\40\151\156\143\162\145\155\145\156\164\157", 
"\106\151\156\120\141\162\141", "\115\151\145\156\164\162\141\163", 
"\106\151\156\115\151\145\156\164\162\141\163", "\122\145\160\145\164\151\162", 
"\106\151\156\141\154\151\172\141\40\143\165\141\156\144\157", "\123\151", "\105\156\164\157\156\143\145\163", "\123\151\156\157", 
"\106\151\156\123\151", "\103\157\156\146\157\162\155\145", "\103\141\163\157", 
"\105\156\40\157\164\162\157\40\143\141\163\157", "\106\151\156\103\157\156\146\157\162\155\145", "\110\141\143\145\162", null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffffe7ffffffffL, 0x18L, 
};
static final long[] jjtoSkip = {
   0xc000000000000000L, 0x7L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[86];
private final int[] jjstateSet = new int[172];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ECTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ECTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 68)
   {
      jjmatchedKind = 68;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 67 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        compilador.tablaErrores.add("Error l\u00e9xico, l\u00ednea "
                        + matchedToken.beginLine + ", columna " + matchedToken.beginColumn
                        + ".\n\tSe encontr\u00f3 un n\u00famero inv\u00e1lido '" + matchedToken.image + "'."
                        + "\n\tPosible soluci\u00f3n: Remover o revisar n\u00famero.");
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        compilador.tablaErrores.add("Error l\u00e9xico, l\u00ednea " +
                     matchedToken.beginLine + ", columna " + matchedToken.beginColumn +
                     ".\nSe encontr\u00f3 s\u00edmbolo inv\u00e1lido '" + matchedToken.image + "'." +
                     "\n\tPosible soluci\u00f3n: Remover s\u00edmbolo.");
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
